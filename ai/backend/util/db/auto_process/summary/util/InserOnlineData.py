import hashlib
import time
import requests

# 开发环境
# INSERT_SECRATE = "123123123"
# ONLINE_URL = "http://127.0.0.1:5000/api/data/"
# 测试环境
# INSERT_SECRATE = "10470c3b4b1fed12c3baac014be15fac67c6e815"
# ONLINE_URL = "http://192.168.2.152:8000/api/data/"


# 线上环境
# INSERT_SECRATE = "69c5fcebaa65b560eaf06c3fbeb481ae44b8d618"
# ONLINE_URL = "https://atlas.deepbi.com/api/data/"


class ProcessShowData():
    # 环境配置
    config = {
        'dev': {
            'INSERT_SECRATE': "123123123",
            'ONLINE_URL': "http://127.0.0.1:5000/api/data/"
        },
        'test': {
            'INSERT_SECRATE': "10470c3b4b1fed12c3baac014be15fac67c6e815",
            'ONLINE_URL': "http://192.168.2.152:8000/api/data/"
        },
        'test_pre': {
            'INSERT_SECRATE': '69c5fcebaa65b560eaf06c3fbeb481ae44b8dpre',
            "ONLINE_URL": "https://pre_atlas.deepbi.com/api/data/"
        },
        'pre': {
            'INSERT_SECRATE': "69c5fcebaa65b560eaf06c3fbeb481ae44b8d618",
            'ONLINE_URL': "https://atlas.deepbi.com/api/data/"
        }
    }

    # 默认使用生产环境
    environment = 'pre'

    @classmethod
    def set_debug_mode(cls, debug):
        """根据debug状态设置环境"""
        cls.environment = 'pre'

    @classmethod
    def sha1(cls, input_string):
        """对输入的字符串进行 SHA-256 哈希加密"""
        hash_object = hashlib.sha256()
        hash_object.update(input_string.encode('utf-8'))
        hashed_string = hash_object.hexdigest()
        return hashed_string

    @classmethod
    def post_data(cls, data, op_type):
        if not data or op_type is None or "" == op_type:
            return "error"
        print(cls.environment)
        timestamp = int(time.time())
        secrete = cls.config[cls.environment]['INSERT_SECRATE']
        token = cls.sha1(secrete + str(timestamp) + secrete)
        #
        headers = {
            'Content-Type': 'application/json',
            'token': str(token),
            'timestamp': str(timestamp)
        }
        url = cls.config[cls.environment]['ONLINE_URL'] + op_type
        # 发送POST请求
        # print(url)
        # print(headers)
        # print(data)
        response = requests.post(url,
                                 headers=headers, json=data)
        # 输出响应内容
        print(response.status_code)
        data = response.json()
        if int(data['code']) == 200:
            return True, data
        else:
            print("操作失败")
            print(response.text)
            return False

    @classmethod
    def insert(cls, data):
        return cls.post_data(data, "insert")

    @classmethod
    def update(cls, data):
        if "ID" not in data:
            return False
        if "UID" not in data:
            return False
        return cls.post_data(data, "update")

    @classmethod
    def delete(cls, data):
        if "ID" not in data:
            return False
        if "UID" not in data:
            return False
        return cls.post_data(data, "delete")

#if __name__ == "__main__":
#     # 要发送的JSON数据
#     add_data = {
#         "UID": "1",
#         "ContinentCode": "NA",
#         "CountryCode": "IT",
#         "DataType": "AD7DAYS",
#         "StartDate": "2025-01-02",
#         "EndDate": "2025-01-02",
#         "ShowData": "{thisi is other data}",
#         "Other": "其他"
#     }
#     # 更新筛选条件为 ID 和UID
# update_data = {
#     "ID": "30178",
#     "UID": "23",
#     "ContinentCode": "BA",
#     "CountryCode": "BT",
#     "DataType": "CXQ",
#     "StartDate": "1025-01-02",
#     "EndDate": "1025-01-02",
#     "ShowData": '[["FR", "2024-08-08", "133.27", "78.99", "59.27%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "412.28", "133.27", "279.01", "67.67%"], ["FR", "2024-08-09", "27.07", "53.67", "198.26%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "198.39", "27.07", "171.32", "86.36%"], ["FR", "2024-08-10", "54.14", "29.13", "53.80%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "208.92", "54.14", "154.78", "74.09%"], ["FR", "2024-08-11", "54.14", "29.94", "55.30%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "393.66", "54.14", "339.52", "86.25%"], ["FR", "2024-08-12", "0.0", "27.37", "None", "11.86", "0.0", "None", "None", "0.0", "15.51", "None", "None", "139.96", "0.0", "139.96", "100%"], ["FR", "2024-08-13", "134.46", "44.24", "32.90%", "24.63", "92.8", "26.54%", "69.02%", "41.66", "19.61", "47.07%", "30.98%", "251.32", "134.46", "116.86", "46.5%"], ["FR", "2024-08-14", "129.72", "46.82", "36.09%", "30.63", "88.06", "34.78%", "67.88%", "41.66", "16.19", "38.86%", "32.12%", "444.83", "129.72", "315.11", "70.84%"], ["FR", "2024-08-15", "106.52", "51.52", "48.37%", "33.41", "23.2", "144.01%", "21.78%", "83.32", "18.11", "21.74%", "78.22%", "155.66", "106.52", "49.14", "31.57%"], ["FR", "2024-08-16", "152.92", "49.85", "32.60%", "39.46", "111.26", "35.47%", "72.76%", "41.66", "10.39", "24.94%", "27.24%", "328.39", "152.92", "175.47", "53.43%"], ["FR", "2024-08-17", "122.79", "19.61", "15.97%", "15.08", "122.79", "12.28%", "100.00%", "0.0", "4.53", "None", "0.00%", "517.81", "122.79", "395.02", "76.29%"], ["FR", "2024-08-18", "178.15", "37.13", "20.84%", "35.25", "178.15", "19.79%", "100.00%", "0.0", "1.88", "None", "0.00%", "546.18", "178.15", "368.03", "67.38%"], ["FR", "2024-08-19", "129.95", "31.51", "24.25%", "28.72", "66.64", "43.10%", "51.28%", "63.31", "2.79", "4.41%", "48.72%", "348.21", "129.95", "218.26", "62.68%"], ["FR", "2024-08-20", "119.96", "43.09", "35.92%", "33.77", "89.97", "37.53%", "75.00%", "29.99", "9.32", "31.08%", "25.00%", "638.25", "119.96", "518.29", "81.2%"], ["FR", "2024-08-21", "177.97", "47.58", "26.73%", "32.01", "119.66", "26.75%", "67.24%", "58.31", "15.57", "26.70%", "32.76%", "597.84", "177.97", "419.87", "70.23%"], ["FR", "2024-08-22", "126.62", "27.92", "22.05%", "17.57", "63.31", "27.75%", "50.00%", "63.31", "10.35", "16.35%", "50.00%", "259.93", "126.62", "133.31", "51.29%"], ["IT", "2024-08-08", "0.0", "3.6", "None", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "185.96", "0.0", "185.96", "100%"], ["IT", "2024-08-10", "0.0", "1.3", "None", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "35.99", "0.0", "35.99", "100%"], ["IT", "2024-08-11", "0.0", "0.97", "None", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "35.99", "0.0", "35.99", "100%"], ["IT", "2024-08-12", "32.78", "4.2", "12.81%", "2.83", "32.78", "8.63%", "100.00%", "0.0", "1.37", "None", "0.00%", "49.99", "32.78", "17.21", "34.43%"], ["IT", "2024-08-13", "40.98", "4.85", "11.84%", "3.71", "40.98", "9.05%", "100.00%", "0.0", "1.14", "None", "0.00%", "29.3", "40.98", "-11.68", "-39.86%"], ["IT", "2024-08-14", "212.52", "6.99", "3.29%", "3.4", "188.5", "1.80%", "88.70%", "24.02", "3.59", "14.95%", "11.30%", "137.89", "212.52", "-74.63", "-54.12%"], ["IT", "2024-08-16", "105.98", "5.28", "4.98%", "4.38", "81.96", "5.34%", "77.34%", "24.02", "0.9", "3.75%", "22.66%", "79.29", "105.98", "-26.69", "-33.66%"], ["IT", "2024-08-17", "0.0", "5.76", "None", "2.32", "0.0", "None", "None", "0.0", "3.44", "None", "None", "87.9", "0.0", "87.9", "100%"], ["IT", "2024-08-18", "311.44", "5.72", "1.84%", "3.02", "311.44", "0.97%", "100.00%", "0.0", "2.7", "None", "0.00%", "79.29", "311.44", "-232.15", "-292.79%"], ["IT", "2024-08-19", "295.02", "5.95", "2.02%", "3.92", "295.02", "1.33%", "100.00%", "0.0", "2.03", "None", "0.00%", "157.96", "295.02", "-137.06", "-86.77%"], ["IT", "2024-08-20", "229.46", "8.99", "3.92%", "7.53", "229.46", "3.28%", "100.00%", "0.0", "1.46", "None", "0.00%", "39.99", "229.46", "-189.47", "-473.79%"], ["IT", "2024-08-21", "295.02", "13.66", "4.63%", "10.61", "295.02", "3.60%", "100.00%", "0.0", "3.05", "None", "0.00%", "157.96", "295.02", "-137.06", "-86.77%"], ["DE", "2024-08-08", "281.94", "107.17", "38.01%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "929.52", "281.94", "647.58", "69.67%"], ["DE", "2024-08-09", "155.93", "84.12", "53.95%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "584.4", "155.93", "428.47", "73.32%"], ["DE", "2024-08-10", "256.74", "89.16", "34.73%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "835.46", "256.74", "578.72", "69.27%"], ["DE", "2024-08-11", "260.85", "82.51", "31.63%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "851.69", "260.85", "590.84", "69.37%"], ["DE", "2024-08-12", "465.11", "56.51", "12.15%", "6.01", "347.48", "1.73%", "74.71%", "117.63", "50.5", "42.93%", "25.29%", "477.88", "465.11", "12.77", "2.67%"], ["DE", "2024-08-13", "865.49", "92.12", "10.64%", "23.05", "601.7", "3.83%", "69.52%", "263.79", "69.07", "26.18%", "30.48%", "594.14", "865.49", "-271.35", "-45.67%"], ["DE", "2024-08-14", "883.56", "89.57", "10.14%", "21.45", "755.2", "2.84%", "85.47%", "128.36", "68.12", "53.07%", "14.53%", "557.54", "883.56", "-326.02", "-58.47%"], ["DE", "2024-08-15", "751.15", "87.6", "11.66%", "28.49", "660.43", "4.31%", "87.92%", "90.72", "59.11", "65.16%", "12.08%", "530.37", "751.15", "-220.78", "-41.63%"], ["DE", "2024-08-16", "1138.51", "70.9", "6.23%", "20.46", "1032.65", "1.98%", "90.70%", "105.86", "50.44", "47.65%", "9.30%", "467.88", "1138.51", "-670.63", "-143.33%"], ["DE", "2024-08-17", "949.63", "73.44", "7.73%", "23.16", "919.39", "2.52%", "96.82%", "30.24", "50.28", "166.27%", "3.18%", "427.89", "949.63", "-521.74", "-121.93%"], ["DE", "2024-08-18", "1130.06", "86.77", "7.68%", "25.97", "1069.58", "2.43%", "94.65%", "60.48", "60.8", "100.53%", "5.35%", "377.9", "1130.06", "-752.16", "-199.04%"], ["DE", "2024-08-19", "1476.7", "110.56", "7.49%", "54.94", "1387.64", "3.96%", "93.97%", "89.06", "55.62", "62.45%", "6.03%", "390.21", "1476.7", "-1086.49", "-278.44%"], ["DE", "2024-08-20", "1548.0", "121.04", "7.82%", "56.5", "1475.75", "3.83%", "95.33%", "72.25", "64.54", "89.33%", "4.67%", "710.27", "1548.0", "-837.73", "-117.95%"], ["DE", "2024-08-21", "1189.64", "120.35", "10.12%", "69.51", "1147.63", "6.06%", "96.47%", "42.01", "50.84", "121.02%", "3.53%", "1023.08", "1189.64", "-166.56", "-16.28%"], ["DE", "2024-08-22", "1310.6", "76.32", "5.82%", "55.63", "1186.27", "4.69%", "90.51%", "124.33", "20.69", "16.64%", "9.49%", "339.91", "1310.6", "-970.69", "-285.57%"], ["EU", "2024-08-08", "415.21", "189.76", "45.70%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "1527.76", "415.21", "1112.55", "72.82%"], ["EU", "2024-08-09", "183.0", "104.32", "57.01%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "782.79", "183.0", "599.79", "76.62%"], ["EU", "2024-08-10", "226.86", "80.83", "35.63%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "1080.37", "226.86", "853.51", "79%"], ["EU", "2024-08-11", "284.75", "77.22", "27.12%", "nan", "nan", "None", "None", "nan", "nan", "None", "None", "1281.34", "284.75", "996.59", "77.78%"], ["EU", "2024-08-12", "497.89", "88.08", "17.69%", "20.7", "380.26", "5.44%", "76.37%", "117.63", "67.38", "57.28%", "23.63%", "667.83", "497.89", "169.94", "25.45%"], ["EU", "2024-08-13", "1040.93", "141.21", "13.57%", "51.39", "735.48", "6.99%", "70.66%", "305.45", "89.82", "29.41%", "29.34%", "874.76", "1040.93", "-166.17", "-19%"], ["EU", "2024-08-14", "1225.8", "143.38", "11.70%", "55.48", "1031.76", "5.38%", "84.17%", "194.04", "87.9", "45.30%", "15.83%", "1140.26", "1225.8", "-85.54", "-7.5%"], ["EU", "2024-08-15", "980.61", "145.0", "14.79%", "64.9", "806.57", "8.05%", "82.25%", "174.04", "80.1", "46.02%", "17.75%", "686.03", "980.61", "-294.58", "-42.94%"], ["EU", "2024-08-16", "1397.41", "126.03", "9.02%", "64.3", "1225.87", "5.25%", "87.72%", "171.54", "61.73", "35.99%", "12.28%", "875.56", "1397.41", "-521.85", "-59.6%"], ["EU", "2024-08-17", "1072.42", "98.81", "9.21%", "40.56", "1042.18", "3.89%", "97.18%", "30.24", "58.25", "192.63%", "2.82%", "1033.6", "1072.42", "-38.82", "-3.76%"], ["EU", "2024-08-18", "1619.65", "129.62", "8.00%", "64.24", "1559.17", "4.12%", "96.27%", "60.48", "65.38", "108.10%", "3.73%", "1003.37", "1619.65", "-616.28", "-61.42%"], ["EU", "2024-08-19", "1901.67", "148.02", "7.78%", "87.58", "1749.3", "5.01%", "91.99%", "152.37", "60.44", "39.67%", "8.01%", "896.38", "1901.67", "-1005.29", "-112.15%"], ["EU", "2024-08-20", "1897.42", "173.12", "9.12%", "97.8", "1795.18", "5.45%", "94.61%", "102.24", "75.32", "73.67%", "5.39%", "1388.51", "1897.42", "-508.91", "-36.65%"], ["EU", "2024-08-21", "1662.63", "181.59", "10.92%", "112.13", "1562.31", "7.18%", "93.97%", "100.32", "69.46", "69.24%", "6.03%", "1778.88", "1662.63", "116.25", "6.54%"], ["EU", "2024-08-22", "1625.7", "121.33", "7.46%", "82.13", "1438.06", "5.71%", "88.46%", "187.64", "39.2", "20.89%", "11.54%", "599.84", "1625.7", "-1025.86", "-171.02%"]]'
# }
# # delete_data = {
# #     "ID": "69466",
# #     "DataType": "D-LOG",
# #     "UID": "1"
# # }
# # #     # ProcessShowData.insert(add_data)
# ProcessShowData.update(update_data)
# ProcessShowData.delete(delete_data)
# for id_value in range(108095, 108095):
#     delete_data = {
#         "ID": str(id_value),
#         "DataType": "D-CALL",
#         "UID": "1"
#     }
#     ProcessShowData.delete(delete_data)
#     print(id_value)
#108094 108095
